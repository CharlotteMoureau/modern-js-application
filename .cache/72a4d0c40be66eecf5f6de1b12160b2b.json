{"dependencies":[],"generated":{"js":"const characterId = new Array()\nconst cardName = document.getElementsByClassName('name-for-modal')\nconst shortDescription = document.getElementsByClassName('short-for-modal')\nconst longDescription = document.getElementsByClassName('long-for-modal')\nconst cardImage = document.getElementsByClassName('image-for-modal')\n\n// clone character's cards\nasync function displayCharactersCards() {\n  try {\n    const response = await fetch('https://character-database.becode.xyz/characters')\n    const character = await response.json()\n\n    const cardTemplate = document.querySelector('#template')\n    const target = document.querySelector('#target')\n\n    character.forEach(({ name, shortDescription, image, description, id }) => {\n      const cardClone = cardTemplate.cloneNode(true).content\n\n      cardClone.querySelector('#name').innerHTML = name\n      cardClone.querySelector('#short-description').innerHTML = shortDescription\n      cardClone.querySelector('#image').src = `data:image/*;base64,${image}`\n      cardClone.querySelector('#long-description').innerHTML = description\n\n      target.appendChild(cardClone)\n\n      characterId.push(id)\n    })\n  } catch (error) {\n    console.error(error)\n  }\n}\n\ndisplayCharactersCards().then(() => {\n  changePinColor()\n  randomRotation()\n  openCharacterCard()\n  createImage()\n  createCharacter()\n  editCharacter()\n  deleteCharacter()\n}).catch((error) => {\n  console.error(error)\n})\n\n// open character card\nfunction openCharacterCard() {\n  const longDescriptionButton = document.getElementsByClassName('long-description-button')\n\n  for (let i = 0; i < longDescriptionButton.length; i++) {\n    longDescriptionButton[i].addEventListener('click', function () {\n\n      let modalName = document.getElementById('name-modal')\n      let modalShortDescription = document.getElementById('short-modal-description')\n      let modalLongDescription = document.getElementById('long-modal-description')\n      let modalImage = document.getElementById('modal-image')\n\n      modalName.textContent = cardName[i].textContent\n      modalShortDescription.textContent = shortDescription[i].textContent\n      modalLongDescription.textContent = longDescription[i].textContent\n      modalImage.src = cardImage[i].src\n    })\n  }\n}\n\n//create a character\nasync function createCharacter() {\n  document.getElementById('create').addEventListener('click', async () => {\n    try {\n      document.getElementById('submit').addEventListener('click', async () => {\n        const inputs = Array.from(document.getElementsByClassName(\"inputs\"))\n        const values = inputs.map(({ value }) => value.trim())\n\n        if (values.some((value) => value === \"\")) {\n          alert(\"there's an empty input!\")\n          return;\n        }\n        else {\n          const [name, shortDescription, description] = values\n          const response = await fetch('https://character-database.becode.xyz/characters', {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              name,\n              shortDescription,\n              description,\n              image,\n            }),\n          })\n\n          const createdCharacter = await response.json()\n          console.log(createdCharacter)\n          location.reload()\n        }\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  })\n}\n\n//create image\nasync function createImage() {\n  document.querySelector(\"#input-image\").addEventListener(\"change\", (element) => {\n    const file = element.target.files[0]\n    const reader = new FileReader()\n    reader.onloadend = () => {\n      image = reader.result.replace('data:', '').replace(/^.+,/, '')\n    };\n    reader.readAsDataURL(file)\n  })\n}\n\n//edit character\nasync function editCharacter() {\n  const outerEditButton = document.getElementsByClassName('outer-edit')\n\n  for (let i = 0; i < outerEditButton.length; i++) {\n    outerEditButton[i].addEventListener('click', async () => {\n      const id = characterId[i]\n      try {\n        const response = await fetch(`https://character-database.becode.xyz/characters/${id}`)\n        const character = await response.json()\n\n        document.getElementById('input-name').value = character.name\n        document.getElementById('input-short-description').value = character.shortDescription\n        document.getElementById('input-long-description').textContent = character.description\n        image = character.image\n\n        document.getElementById('submit').addEventListener('click', async () => {\n          const inputs = Array.from(document.getElementsByClassName(\"inputs\"))\n          const values = inputs.map(({ value }) => value.trim())\n          const [name, shortDescription, description] = values\n\n          if (values.some((value) => value === \"\")) {\n            alert(\"there's an empty input!\")\n            return;\n          }\n          else {\n            const edit = await fetch(`https://character-database.becode.xyz/characters/${id}`, {\n              method: 'PUT',\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                name,\n                shortDescription,\n                description,\n                image\n              }),\n            })\n            const editedCharacter = await edit.json()\n            console.log(editedCharacter)\n            location.reload()\n          }\n        })\n      } catch (error) {\n        console.error(error)\n      }\n    })\n  }\n}\n\n// delete a character\nfunction deleteCharacter() {\n  const deleteButton = document.getElementsByClassName('delete')\n\n  for (let i = 0; i < deleteButton.length; i++) {\n    deleteButton[i].addEventListener('click', async function () {\n\n      if (confirm('Are you sure you want to delete this character?')) {\n        const id = characterId[i]\n\n        try {\n          const response = await fetch(`https://character-database.becode.xyz/characters/${id}`, {\n            method: 'DELETE'\n          })\n\n          const deletedCharacter = await response.json()\n          console.log(deletedCharacter)\n\n          location.reload()\n        } catch (error) {\n          console.error(error)\n        }\n      } else {\n        alert('This character has not been deleted')\n      }\n    })\n  };\n}\n\n// change pin color randomly\nfunction changePinColor() {\n  const pins = Array.from(document.getElementsByClassName('fa-thumbtack'));\n  const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"black\", \"orange\", \"purple\", \"gray\"];\n  pins.forEach(pin => pin.style.color = colors[Math.floor(Math.random() * colors.length)]);\n}\n\n// change style of the cards\nfunction randomRotation() {\n  const cards = Array.from(document.getElementsByClassName('card'));\n  const rotate = [\"rotate(1deg)\", \"rotate(-1deg)\", \"rotate(0deg)\", \"rotate(0deg)\", \"rotate(0deg)\"]\n  cards.forEach(card => card.style.transform = rotate[Math.floor(Math.random() * rotate.length)])\n}"},"hash":"d7269589f39f02c16d9bc5d75c380bb4"}